List
  refToElement elements  //Array of elements
  Integer tail  //Index of tail
  Integer numElements //Size of the list
  Integer capacity  //Max number of elements
end List

Algorithm CreateList(size)
Create a new list.
Pre: size :: the capacity of the array
Returns: a reference to a newly allocated list that is initialized to be empty.

refToList rNewList <- allocate new List
rList *=> capacity <- size
rList *=> tail <- -1
rList *=> numElements <- 0
rList *=> elements <- allocate new Element [size]
return rNewList

Algorithm RetrieveElement(rList, target, el)
Pre: rList :: a reference to the list from which to retrieve.
target :: the key of the element to retrieve.
el :: a reference to a variable of type Element in which to store the retrieved element
Post: copy of the element with key target placed in *el or *el undefined if target not found. Returns: true if successful, false if target not found

for current from 0 to rList *=> numElements
  if (target == key of rList *=> elements[current])
    *el <- rList *=> elements[current]
    return true
  end if
end
return false


Algorithm InsertTail(rList, el)
Pre: rList :: a reference to a list into which to insert 
el :: an Element
Post: el is inserted into the list
Return: true if successful, false otherwise

if ( rList*=>numElements == rList*=>capacity ) 
  return false // Special case when list is full
else
  // put the new element in the position indexed by numElements
  rList *=> elements[numElements] <- el
  rList *=> numElements <- rList *=> numElements + 1
  rList *=> tail <- rList*=>tail + 1
end if
return true


Algorithm InsertHead(rList, el)
Pre: rList is a reference to a list into which to insert el is an Element
Post: el is inserted as the first element of the list
Return: true if successful, false otherwise

if ( rList *=> numElements == rList *=> capacity )
  return false
end if

// Shift each element of the elements array one index to the right.
i← rList *=> numElements
while(i >0)
  rList *=> elements[i] <- rList *=> elements[i-1]
  i <- i-1
end while

rList *=> elements[0] <- el
rList *=> tail <- rList *=> tail + 1
rList *=> numElements <- rList *=> numElements + 1

return true
